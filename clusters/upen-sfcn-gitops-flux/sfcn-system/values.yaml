#This is a YAML-formatted file.

#These are the default settings for the SFCN installation that includes multiple components. The settings
#under global section take effect on all components and the settings under a specific component will effect only that component
#You can uncomment any setting you want to override and set a new value there.
global:
  #platform is the cluster type to which this chart is to be installed. Valid values are eks, kvm
  platform: eks
  #infrastructure is the underlying infrastructure on which k8s cluster is installed.
  #Valid values are aws, openstack, vsphere
  infrastructure: aws

  #imageCredentials are the credentials to Docker Registry hosting the SFCN images
  imageCredentials:
    #registry is the url to the docker registry, for example dockerhub.cisco.com
    registry: 709825985650.dkr.ecr.us-east-1.amazonaws.com
    #artifactoryRepo is the repository name of the artifactory if the registry is hosted by artifactory
    artifactoryRepo: cisco/sfcn/prod
    #email is the email address of the specified user
    email: ""
    # the username of the user to use when accessing the registry
    username: ""
    # the password of the specified user
    password: ""

  #fullnamePrefix adds a global prefix set here to every resource generated by this chart and its dependencies
  fullnamePrefix: ""

  #fullnameSuffix adds a global suffix set here to every resource generated by this chart and its dependencies
  fullnameSuffix: ""

  #certManagerNamespace defines the namespace of the cert-manager installation.
  certManagerNamespace: "cert-manager"

  #dataPlaneNamespace is the tenant namespace where data plane components will be installed,
  #defaults to chart namespace(passed via `-n` parameter)
  dataPlaneNamespace: "sfcn-system"

  #the node selector(s) used to specify where enforcement pods need to go, and where control plane should avoid going
  dataPlaneAffinity: {
    "sfcn.cisco.com/nodetype" : "enforcement"
  }

  #only used when sfc is enabled. Specify which auto scaler node group to deploy the enforcement pods
  sfcDataPlaneNodeGroup: "epworkers"

  # changing this flag to yes, or agree implicitly acknowledges the acceptance of the Cisco's EULA
  # https://www.cisco.com/c/en/us/about/legal/cloud-and-software/end_user_license_agreement.html
  acceptEULA: yes

  #the type of storage to use for storage and logging servers, valid values: local, efs, afs; default value: local
  storageType: local
  #the name of storage class
  storageClassName: "sfcn-sc"

  #choose a custom storage size for storage and logging servers.
  #For EFS, this does not actually affect the backend storage.
  #For AFS, the Azure file share size in GB must match what is requested in PVC which uses this parameter.
  storageSize: 1Gi

  #forceUpgradeDeployments specifies the list of deployments that if not compatible on upgrade should be deleted
  #and created without failing the upgrade. Forcing the upgrade involves a short downtime for the listed Deployments
  forceUpgradeDeployments: [sfcn-system/sfcn-vpnredirector-enforcer,sfcn-system/sfcn-cag-enforcer]

  #forceUpgradeAllDeployments specifies that any incompatible Deployment for upgrade should be deleted and created without
  #failing the upgrade. Forcing the upgrade involves a short downtime for the incompatible Deployments
  forceUpgradeAllDeployments: false

  #enableDatadogMetrics annotates Pods exposing metrics with specific annotations for Datadog autodiscovery. Note that
  # this flag does not automatically install Datadog Agent, it must be installed separately.
  enableDatadogMetrics: false

  # parameters specifically for azure platform
  azure:
    # you can either provide the secret and namespace of the secret that contains the fixed Azure fileshare
    azureFileSecret: azurefile-secret
    azureFileSecretNamespace: kube-system
    # or you can provide the contents of the secret to be created in the control plane namespace.
    azureFileSecretContents:
      storageAccountName:
      storageAccountKey:

  eks:
    # eks cluster name, used in interface provisioner
    clusterName: "usahu-sfcn-gitops-flux"

#fullnamePrefix adds a prefix set here to every resource generated by this chart
fullnamePrefix: "sfcn-"

#fullnameSuffix adds a suffix set here to every resource generated by this chart
fullnameSuffix: ""

#sfcn-api-server sets the settings for apiServer component. These can be set from command line with
#--set apiServer.settingName. This component is responsible for providing a mechanism to query the ASA instances in the cluster
#using the kubectl command from the terminal via the asacommand flag. Following are the available settings for this component,
#uncomment the setting you want to override and set the new value to it
apiServer:
  #apiserverImage is the docker image for the API server extension that helps communicate with ASAc
  #apiserverImage: sfcn-apiserver:v0.0.0-145

  #defaultImagePullPolicy is default docker image policy to use for pulling the images that is used by all pod containers
  defaultImagePullPolicy: Always

  #auditLogPolicyPath defines mount point for the audit policy configuration file
  #auditLogPolicyPath: "/etc/sfcn/audit-policy.yaml"
  serviceRoles: [cnfwentry]
  redis:
    host: master.usc66a4mem3tmsv.h5wuke.use1.cache.amazonaws.com
    port: 6379

#sfcn-cli-blocklist sets the settings for cliBlocklist component. These can be set from command line with
#--set cliBlocklist.settingName. This component is responsible for validating CLI lines in the ASAConfiguration
#objects to prevent the usage of blocked commands in the configuration that will fail the deployment. It ensures such
#configurations are detected early and notified than deploying an invalid configuration to the running ASA instances. Following
#are the available settings for this component, uncomment the setting you want to override and set the new value to it
cliBlocklist:
  #cliBlocklistImage is the docker image for the blocklist service that validates CLI lines in ASAConfiguration objects for
  #blocked commands usage to prevent them from deploying to ASA ensuring early detection and notification
  #cliBlocklistImage: sfcn-cli-blocklist:v0.0.0-145

  #defaultImagePullPolicy is default docker image policy to use for pulling the images that is used by all pod containers
  defaultImagePullPolicy: Always


#sfcn-cli-validation sets the settings for cliValidation component. These can be set from command line with
#--set cliValidation.settingName. This component is responsible for validating CLI lines in the ASAConfiguration
#objects to ensure safe deployment of the commands to ASA. It does so by compiling the provided configuration and deploying it
#to an isolated ASA instance meant solely for validation. Following are the available settings for this
#component, uncomment the setting you want to override and set the new value to it
cliValidation:
  #cliValidationImage is the docker image for the validation service that checks validity of CLI lines compiled from all
  #ASAConfiguration objects before performing an actual deployment to ASA instances serving the traffic
  #cliValidationImage: sfcn-cli-validation:v0.0.0-145

  #asaGatewayServerImage is the docker image for the server that is the entrypoint to communicating with an ASA
  #asaGatewayServerImage: sfcn-asagatewayserver:v0.0.0-145

  #asacImage is the docker image for running ASAc that is used solely for validation
  #asacImage: sfcn-asac:99.17.28.78

  #defaultImagePullPolicy is default docker image policy to use for pulling the images that is used by all pod containers
  defaultImagePullPolicy: Always
  #log verbosity
  #logLevel: 2

  #zap log encoder
  #options: console, json
  #logFormat: console

  #fileServerDownloadDir implies the location on disk of the nodes running ASA, where files referenced by FileObject CRDs
  #need to be stored
  #fileServerDownloadDir: /mnt/disk0/storage

  #deployFileDirASA implies the location on disk of ASA where the compiled CLI lines from ASAConfiguration objects be stored for
  #deployment to ASA
  #deployFileDirASA: configuration/

  #deployFileDirMount implies the location on disk of the node where the ASA is running. Used in conjunction with the property
  #deployFileDirASA
  #deployFileDirMount: /mnt/disk0/configuration/

  #disableCliVal is a flag to disable the CLI validation component from getting included in the installation or upgrade
  #disableCliVal: false

  #housekeeperImage is the docker image for the housekeeper process that will monitor disk0 file counts and space consumption
  #of the ASA instance being used for validation
  #housekeeperImage: sfcn-housekeeper:v0.0.0-145


#sfcn-labeler sets the settings for labeler component. These can be set from command line with
#--set labeler.settingName. This component is responsible for tagging the nodes with the right labels based on which ASA is
#running on that node. These labels are used by other components to target the configuration to be deployed to those ASA
#instances. Following are the available settings for this component, uncomment the setting you want to override and
#set the new value to it
labeler:
  #controllerImage is the docker image for the controller service that watches EP pods/nodes and labels them with metadata
  #controllerImage: sfcn-labeler:v0.0.0-145

  #defaultImagePullPolicy is default docker image policy to use for pulling the images that is used by all pod containers
  defaultImagePullPolicy: Always

  # Container resource limits
  managerCpuLimit: 100m
  managerMemoryLimit: 100Mi

  #log verbosity
  #logLevel: 2

  #zap log encoder
  #options: console, json
  #logFormat: console


#sfcn-control-plane sets the settings for controlPlane component. These can be set from command line with
# --set controlPlane.settingName. This component is responsible for validating and processing the configurations of the CRDs
#of this chart. Following are the available settings for this component, uncomment the setting you want to override and
#set the new value to it
controlPlane:
  #managerImage is the docker image for the controller service that processes the CRDs of this chart such as ASAConfiguration,
  #MetricsConfiguration, IPv4AddressPool, IPv4SubnetPool, and so on. It is responsible for generating the compiled configuration
  #that should be deployed to ASA instances
  #managerImage: sfcn-controller:v0.0.0-145

  #deltagenServerImage is the docker image for the delta generation service that calculates CLI lines for delta deployment
  #deltagenServerImage: sfcn-deltagen-server:7.17.1.86

  #defaultImagePullPolicy is default docker image policy to use for pulling the images that is used by all pod containers
  defaultImagePullPolicy: Always

  #log verbosity
  #logLevel: 2

  #zap log encoder
  #options: console, json
  #logFormat: console

  #metricsPort is the port metric endpoint binds to obtain the health metrics of this pod
  #metricsPort: 16080

  #webhookPort is the port webhook server binds to. This server is responsible for validating the CRD objects you post to
  #kubernetes
  #webhookPort: 16443

  #rbacProxyPort is the port where kube-rbac-proxy container listens on
  #rbacProxyPort: 16444

  # Flag for setting ASACONFIGSET_STOP_ON_DELTA_FAILURE inside the sfcn-cp-feature-flag-config configMap. Determines whether
  # updates to ASAConfigurations should still be attempted if a delta deployment validation is unsuccessful.
  #
  # False (default): proceed with reconciliation if a delta fails to properly generate. Note, a full deployment will occur
  #                  (e.g. "clear configuration all" is issued and the entire desired config is applied to the enforcer).
  #                  This may lead to an unexpected disconnect of VPN sessions in cases where user applies config containing
  #                  ASA CLI syntax errors, unsupported configuration, etc.
  #
  # True:           Strict pre-deployment validation. Exit ASAConfigurationSet reconciliation upon failure, halting the deployment
  #                 until the CLI lines in question have been addressed.
  #stopOnDeltaFailure: False


#sfcn-data-plane sets the settings for dataPlane component. These can be set from command line with
# --set dataPlane.settingName. This component is responsible for deploying ASA instances to your cluster and provides a ton of
#options to modify how individual pieces all play together. Following are the available settings for this component, uncomment
#the setting you want to override and set the new value to it
dataPlane:

  #serviceRoles specifies the list of arbitrary strings that are valid label values denoting the role of the
  #Kubernetes Deployment of ASA. Default is the value default, in that case, one Deployment is made that handles
  #the ASAConfiguration not targeted for any particular service role.
  serviceRoles: [vpnredirector,cnfwentry,cntdmid,sfcexit]

  #Docker image for the ASAc sfc-manager Image
  #sfcManagerImage: sfcn-sfc-manager:v0.0.0-145

  #configurationTier specifies a type of configuration and defines default resource limits for containers on an instance
  #like CPU, memory, HugePages, etc. Configuration tier is tightly coupled with the instance type of EP nodes
  #and should be chosen correspondingly depending on the number of CPU cores on EP node.
  #Supported values: "vCPU8Mem16Gi"
  #You can configure the configuration tier for your ASA serving a specific service role as
  #yourServiceRoleValueConfigurationTier, e.g. vpnRedirectorConfigurationTier where the service role may be
  #defined as vpn-redirector(preferred), vpn_redirector, vpnRedirector. See serviceRoles below.
  configurationTier: "vCPU8Mem16Gi"

  #specific which interfaces need to attach public IPs
  publicIPs: [ "outside" ]

  # Docker image for SFC VPP
  #sfcVppImage: sfcn-sfc-vpp-v22.02-generic:v0.0.0-176

  #Docker Image for interface-configurer
  #interfaceConfigurerImage: sfcn-aws-interface-configurer:v0.0.0-145

  #Docker Image for interface-labeler
  #interfaceLabelerImage: sfcn-ocp-interface-labeler:v0.0.0-145

  #sfcManagerConfigStatusPort specifies the port on which config status server will be running for sfc-manager
  #sfcManagerConfigStatusPort: "50054"

  #redis configures the settings for Redis cache integration for all data plane enforcers
  redis:
    #host is the Redis DB address (target must be reachable from the ASAc inside-network).
    #N.B. ASAc is configured via CLI and values must match.
    host: "master.usc66a4mem3tmsv.h5wuke.use1.cache.amazonaws.com"

    #port is the Redis DB Port.
    #N.B. ASA is configured via CLI and values must match.
    port: 6379

    #db is the Redis DB instance, currently only instance 0 is supported.
    #N.B. ASAc is configured via CLI and values must match.
    #db: 0

    #useSsl implies using SSL to connect to the Redis Server (true|false).
    #N.B. ASAc is configured via CLI and values must match.
    #useSsl: true

    #pem is the PEM for the External Redis Server certificate chain -- needed when ssl
    #encryption is required and an external Redis Seriver is configured
    #(see useSsl and extServerCert)
    #pem: ""

    #username is the Username used to connect to the Redis Server, currently unused.
    #N.B. ASAc is configured via CLI and values must match.
    #username: ""

    #token is the Token used to connect to the Redis Server (As configured on the remote server).
    #N.B. ASAc is configured via CLI and values must match.
    #token: ""

    #extServerCert implies the use of an external Redis server, if useSsl is also set like this to 'true'
    #then the redis.pem must be populated (true|false)
    #extServerCert: false

    #storage_key is the User provided key to encrypt sensitive data in Redis
    storage_key: "7372F6AB905D5792756F1A57425ACC2B19696C9075FDAC4098BF6F1AE19638C2"

    #storage_iv is the Initialization Vector to encryot sensitive data in Redis
    #storage_iv: ""

    #enables HPA for all deployments
    hpa:
      enable: true
      #maxReplicas are controlled by available licenses for most pods. The only exceptions are sfc-entry and sfc-exit pods.
      #maxReplicas: 30

  #cnfw encompasses overrides specific for cnfw chart
  cnfw:
      #managerImage is the docker image for the controller service that watches ASA-related CRDs and obtains ASA deployment
      #configuration for the ASA running on the same node as this manager
      #managerImage: sfcn-enforcementpoint:v0.0.0-145

      #asacImage is the docker image to use for running ASAc. If service roles (see serviceRoles setting below) are configured,
      #then an additional property can be used to configure the asacImage of that service role. This setting is based on the
      #service role value you provide. For instance, if service role value is set to vpn-redirector, then the docker image of the
      #ASA instance for that service role can be changed with the property vpnRedirectorAsacImage, only alphanumeric characters
      #are considered with each word in title case and the starting character in lower case
      #asacImage: sfcn-asac:99.17.28.78

      #asaGatewayServerImage is the docker image for the server that is the entrypoint to communicating with an ASA
      #asaGatewayServerImage: sfcn-asagatewayserver:v0.0.0-145

      #defaultImagePullPolicy is default docker image policy to use for pulling the images that is used by all pod containers
      defaultImagePullPolicy: Always

      #logLevel specifies log verbosity
      #logLevel: 2

      #logFormat specifies zap log encoder
      #options: console, json
      #logFormat: console

      #coresDirToWatch is the watched directory to see if the system needs to spin off a troubleshoot. Used for monitoring ASA
      #crash and collecting its core dump
      #coresDirToWatch: /mnt/coredump_repo/

      #disableCliVal if set disables cli validation and can be used if the need arises, e.g. if
      #cli-validation is preventing deployment of valid configuration but the configuration
      #unexpectedly fails during validation time.
      #disableCliVal: false

      #metricsPort is the port metric endpoint binds to
      #metricsPort: 15080

      #webhookPort is the port webhook server binds to
      #webhookPort: 15443

      #rbacProxyPort is the port kube-rbac-proxy container listens on
      #rbacProxyPort: 15444

      #licenseClientPort identifies the port number on which the enforcement pod should listen
      #for licensing notifications from the license server
      #licenseClientPort: "50052"

  #cagPortal encompasses overrides specific for CAG Portal chart
  cagPortal:
    # Default image policy that is used by all pod containers unless being explicitly overwritten
    defaultImagePullPolicy: Always

    #log verbosity
    #logLevel: 2

    #logFormat specifies zap log encoder
    #options: console, json
    #logFormat: console

    #portal is to configure Duo Network Gateway portal which handles user requests
    #portal:
      #image used by Duo Network Gateway portal
      #image: sfcn-cag-portal:v0.0.0-145

      #specifies the amount of memory to allocate per request for the portal container
      #memoryRequest: "7000Mi"

      #specifies the maximum of memory to allocate per request for the portal container
      #memoryLimit: "7000Mi"

      #the amount of vCPU to allocate per request for the portal container
      #cpuRequest: "3000m"

      #the maximum amount of vCPU to allocate per request for the portal container
      #cpuLimit: "3000m"

    #manager is a k8s component to populate Network Interface Labels in portal pods
    #manager:
      #Docker image for populating the network Interface labels
      #image: sfcn-cag-portal-manager:v0.0.0-145

    #prometheus container for monitoring
    #exporter:
      #Docker image for monitoring
      #image: cag-exporter:v0.0.0-10

      #specifies the amount of memory to allocate per request for the exporter container
      #memoryRequest: "500Mi"

      #specifies the maximum of memory to allocate per request for the exporter container
      #memoryLimit: "500Mi"

      #the amount of vCPU to allocate per request for the exporter container
      #cpuRequest: "500m"

      #the maximum amount of vCPU to allocate per request for the exporter container
      #cpuLimit: "500m"

    #init:
      #image: sfcn-cag-init-portal:v0.0.0-145

    #redis is to configure Duo Network Gateway redis instance as in-memory cache for both admin and portal
    #redis:
      #image used by Duo Network Gateway local redis
      #localImage: duosecurity/network-gateway:redis-1.5.12
    cagPortalManager:
      defaultImagePullPolicy: Always

  cntdmid:
    #image used by telegraf
    #telegrafImage: sfcn-telegraf:v0.0.0-145

#sfcn-license-broker sets the settings for licenseBroker component. These can be set from command line with
# --set licenseBroker.settingName. This component is responsible for handling license requests from ASAs in the cluster and
#to process the SmartLicense configurations posted to Kubernetes. It registers the cluster with Cisco Security
#Software Manager based on the SmartLicense configuration and ensures the licenses are obtained or released from/to your
#SmartAccount depending on the needs of your cluster. Following are the available settings for this component, uncomment the
#setting you want to override and set the new value to it
licenseBroker:
  #conrollerImage is image for the controller or manager that processes licensing CRDs and their reconciliation
  #controllerImage: sfcn-license-broker:v0.0.0-145

  #licenseServerImage is the docker image for the local license server that communicates with the smart account on CSSM
  #licenseServerImage: sfcn-license-server:v0.0.0-145

  #licenseServerPort is the port where the local license server is listening for requests
  #licenseServerPort: 17051

  #licenseServerTransportUrl is the http transport to make use of to connect to CSSM
  #licenseServerTransportUrl: "https://smartreceiver.cisco.com/licservice/license"

  #defaultImagePullPolicy is default docker image policy to use for pulling the images that is used by all pod containers
  defaultImagePullPolicy: Always

  #log verbosity
  #logLevel: 2

  #zap log encoder
  #options: console, json
  #logFormat: console

  #managerMemoryRequest specifies the amount of memory to allocate per request for manager container
  #managerMemoryRequest: "20Mi"

  #managerCpuRequest specifies the amount of vCPU to allocate per request for manager container
  #managerCpuRequest: "100m"

  #managerMemoryLimit specifies the maximum amount of memory to allocate for manager container
  #managerMemoryLimit: "100Mi"

  #managerCpuLimit specifies the maximum amount of vCPU to allocate for manager container
  #managerCpuLimit: "100m"

  #metricsPort is the port the metric endpoint binds to
  #metricsPort: 17080

  #webhookPort is the port that the webhook server serves at
  #webhookPort: 17443

  #rbacProxyPort is the port that the RBAC proxy server serves at
  #rbacProxyPort: 17444

  #licenseServerMemoryRequest specifies the amount of memory to allocate per request for license-server container
  #licenseServerMemoryRequest: "20Mi"

  #licenseServerCoreRequest specifies the amount of vCPU to allocate per request for license-server container
  #licenseServerCoreRequest: "100m"

  #licenseServerMemoryLimit specifies the maximum amount of memory to allocate for license-server container
  #licenseServerMemoryLimit: "2000Mi"

  #licenseServerCoreLimit specifies the maximum amount of vCPU to allocate for license-server container
  #licenseServerCoreLimit: "1000m"

  #licenseServerStorage specifies the persistent volume size to use for storing licensing data
  #licenseServerStorage: "1Gi"


#sfcn-snmp-exporter sets the settings for snmpExporter component. These can be set from command line with
#--set snmpExporter.settingName. This component is responsible for processing MetricsConfiguration CRD and handling SNMP
#configuration for the ASA instances. Following are the available settings for this component, uncomment the
#setting you want to override and set the new value to it
snmpExporter:
  #defaultImagePullPolicy is default docker image policy to use for pulling the images that is used by all pod containers
  defaultImagePullPolicy: Always

  #noNodeAffinity if set skips node affinity setting.
  #noNodeAffinity: 1

  #serviceRoles is a list of roles for which SNMP Exporter deployments are created. Each role is attached to a deployment
  #and PODs labels. The SNMP exporter PODs will be co-located with Enforcers of the same role.
  serviceRoles: [vpnredirector,cnfwentry]


#sfcn-storage-server sets the settings for storageServer component. These can be set from command line with
#--set storageServer.settingName. This component is responsible for processing MetricsConfiguration CRD and handling SNMP
#configuration for the ASA instances. Following are the available settings for this component, uncomment the
#setting you want to override and set the new value to it
storageServer:
  #storageServerImage is the docker image for the storage service that allows to upload and download ASA deployment files to
  #an S3 Bucket on EKS or to the node where this pod runs
  #storageServerImage: sfcn-storage-server:v0.0.0-145

  #housekeeperImage is the docker image for the housekeeper process that will monitor disk file counts and space consumption
  #housekeeperImage: sfcn-housekeeper:v0.0.0-145

  #defaultImagePullPolicy is default docker image policy to use for pulling the images that is used by all pod containers
  defaultImagePullPolicy: Always

  #logLevel is the log verbosity
  #logLevel: 2

  #logFormat is the zap log encoder
  #options: console, json
  #logFormat: console


#sfcn-logscollector sets the settings for logsCollector component. These can be set from command line with
#--set logsCollector.settingName. This component is responsible for collecting logs from each node that should be uploaded to
#the storage server. Following are the available settings for this component, uncomment the setting you want to override and
#set the new value to it
logsCollector:
  #defaultImagePullPolicy is default docker image policy to use for pulling the images that is used by all pod containers
  defaultImagePullPolicy: Always

  #logsCollectorImage is the Image of logs collector
  #logsCollectorImage: sfcn-logscollector:v0.0.0-145

  #coresDirToWatch is the Directory to be watched by logs collector for any new cores/log files. ASAc writes out core to this
  #directory on worker node.
  #coresDirToWatch: /mnt/upload_to_ss/

  #uploadDir is the Directory to be uploaded to on storage server
  #uploadDir: /troubleshoot

  #maxRetries is the Maximum number of retries to upload file in case the storage server returns an error code
  #maxRetries: 3


#sfcn-logsforwarder sets the settings for logsForwarder component. These can be set from command line with
#--set logsForwarder.settingName. This component is responsible for forwarding logs from each node to a central log server for
#syslog. Following are the available settings for this component, uncomment the setting you want to override and set the new
#value to it
logsForwarder:
  #fluentBitImage is the Fluentbit docker image
  #fluentBitImage: fluent/fluent-bit:1.9.0

  #defaultImagePullPolicy is default docker image policy to use for pulling the images that is used by all pod containers
  defaultImagePullPolicy: Always

  #syslogService is the central logging service name
  #syslogService: sfcn-logging-server

  #syslogServicePort is the central logging service port
  #syslogServicePort: 11601

  #enableFilePlugin enables/disables fluentbit file output plugin
  #enableFilePlugin: false

  #enableNodeExporterPlugin enables/disables fluentbit Node Exporter plugin
  #enableNodeExporterPlugin: false

  #fluentbit telemetry port
  #fluentBitTelemetryPort: 2020

  #Node-exporter metrics port
  #nodeExporterMetricsPort: 2021


#sfcn-logging-server sets the settings for loggingServer component. These can be set from command line with
#--set loggingServer.settingName. This component is responsible for running a central log server that redirects logs to
#syslog. Following are the available settings for this component, uncomment the setting you want to override and set the new
#value to it
loggingServer:
  #loggingServerImage is the central logging server image
  #loggingServerImage: sfcn-loggingserver:v0.0.0-145

  #defaultImagePullPolicy is default docker image policy to use for pulling the images that is used by all pod containers
  defaultImagePullPolicy: Always

  #syslogServicePort is the central logging service port
  #syslogServicePort: 11601

  #destinationFile is the Destination file to send the logs to
  #destinationFile: "/var/log/logs/messages.log"

  #logFilesToKeep is the Number of log files to keep
  #logFilesToKeep: 10

  #logFileSize is the Max allowed size of log file before rotation
  #logFileSize: 10M

  #logRotatorImage is Log rotator image
  #logRotatorImage: sfcn-logrotator:v0.0.0-145

#aegis-tsnodeagent sets the settings for tsNodeAgent component. These can be set from command line with
#--set tsNodeAgent.settingName. This component is responsible for running a troubleshoot agent on each node. Following are the
#available settings for this component, uncomment the setting you want to override and set the new value to it
tsNodeAgent:
  #tsNodeAgentImage is the Docker image for the agent that does the troubleshooting
  #tsNodeAgentImage: sfcn-tsnodeagent:v0.0.0-145

  #defaultImagePullPolicy is default docker image policy to use for pulling the images that is used by all pod containers
  defaultImagePullPolicy: Always

  #coresDirToWatch is the Directory where crashinfo and cores go, watched by tsnodeagent to trigger jobs. ASAc writes out core to
  #this directory on worker node.
  #coresDirToWatch: /mnt/coredump_repo/

  #watchFileRegex is the regex of file to trigger fsnotify events on for pkg creation, by default the system watches
  #for crashinfo files.
  #watchFileRegex: '.{1,100}_crashinfo_.{1,100}'

  #uploadToStorageDir is the directory to place files to automatically push up to storage server
  #uploadToStorageDir: /mnt/upload_to_ss/

#sfcn-scaledown-job configures the settings for the optional managed scale-down job. These can be set from the command line with
#--set scaledown.settingName. This component is responsible for scheduling a state-aware scale down job during a defined
#timeframe to minimize traffic disruption. The following are the available settings for this job. Uncomment the setting you wish
#to override and add the desired value to it.
scaledown:
  # name which can be overridden. useful when multiple cronJobs are needed
  #jobName: scaledown

  #scaledownJobImage is the Docker image for the job container
  #scaledownJobImage: sfcn-scaledownjob:v0.0.0-145

  # Default image policy that is used by all pod containers unless being explicitly overwritten
  defaultImagePullPolicy: Always

  # must be true to enable the feature
  enable: true

  # when true, deploy a CronJob. When false, deploy a Job which executes immediately
  #cron: true

  # cron schedule is every 6 hours at the 13th minute.
  # For more info on syntax, refer to official kubernetes cronJob documentation
  # https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax
  # or, use a tool like https://crontab.guru/
  #schedule: "13 */6 * * *"

  # ttl (ttlSecondsAfterFinished) limits the lifetime of a Job that has finished execution (either Complete or Failed).
  # If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted.
  # When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset,
  # the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately
  # after it finishes.
  #ttl: 30

  #memoryLimit specifies the maximum amount of memory to allocate for the pod
  #memoryLimit: "50Mi"

  #memoryRequest: specifies the amount of memory to allocate per request for the pod
  #memoryRequest: "20Mi"

  #coreLimit specifies the maximum amount of CPU to allocate for the pod
  #coreLimit: "100m"

  #coreRequest specifies the  amount of CPU to allocate for per request the pod
  #coreRequest: "100m"

  #successHistory (successfulJobsHistoryLimit) is the number of successful finished jobs to retain. This is a pointer to
  #distinguish between explicit zero and not specified
  #successHistory: 1

  #logLevel is the log verbosity
  #logLevel: 2

  #logFormat is the zap log encoder
  #options: console, json
  #logFormat: console

# the following block is for signature verification
# note that if the gpgPublicKey is not provided, we simply
# will not deploy anything at all.
signatureVerify:

  # target repo url for Cisco images that need signature verification
  # TODO: its possible that we will just store the urls for different repos here
  #       so that ciscoImageRepo if null is just filled in later.
  ciscoImageRepo: devhub-docker.cisco.com/asac-dev-docker/

  # target URL for the sigstore
  ciscoImageSigStore: https://devhub.cisco.com/artifactory/list/asac-cdn/josyuansigs2

  # set ciscoSignedPrefix to remap signing identity, i.e.
  # if we have images actually in ecr so ciscoImageRepo is targeting ecr,
  # but we signed against devhub, ciscoSignedPrefix should have devhub prefix
  ciscoSignedPrefix:

  # gpgKey used for signing
  gpgPublicKey: null

  # store username for accessing the sig store
  storeUsername:

  # store password for accessing the sig store
  storePassword:

#sfcn-redirector sets the settings for redirector component. These can be set form the command line with
#--set redirector.settingName. This component is responsible for running a redirector service to redirector incoming traffic
#Following are the available settings for this component, uncomment the setting you want to override and set the new value
redirector:
  #Docker image for the redirector service that redirects traffic to enforcer pods
  #redirectorImage: sfcn-redirector:v0.0.0-145

  #Default image policy that is used by all pod containers unless being explicitly overwritten
  defaultImagePullPolicy: Always

  #memoryLimit specifies the maximum amount of memory to allocate for the pod
  #memoryLimit: "150Mi"

  #memoryRequest: specifies the amount of memory to allocate per request for the pod
  #memoryRequest: "150Mi"

  #coreLimit specifies the maximum amount of CPU to allocate for the pod
  #coreLimit: "100m"

  #coreRequest specifies the  amount of CPU to allocate for per request the pod
  #coreRequest: "100m"

  #must be true to enable the feature
  #enable: false

  #Fully Qualified Domain Name for VPN redirector
  #fqdn: "change-me.please.io"

  # (Optional) Network Load Balancer name
  #loadBalancerName: ""

# clientlessAccessGateway block is to configure SFCN Duo Network Gateway component
clientlessAccessGateway:
  #admin is to configure Duo Network Gateway admin for administrative purpose
  #admin:
    #image used by Duo Network Gateway admin
    #image: duosecurity/network-gateway:admin-1.5.12

  #portal is to configure Duo Network Gateway portal which handles user requests
  #portal:
    #image used by Duo Network Gateway portal
    #image: duosecurity/network-gateway:portal-1.5.12

  #redis is to configure Duo Network Gateway redis instance as in-memory cache for both admin and portal
  #redis:
    #image used by Duo Network Gateway redis
    #image: duosecurity/network-gateway:redis-1.5.12
sfcConfigurer:
  # Docker image for the controller service
  #controllerImage: sfcn-sfc:v0.0.0-145

  # zap log level
  # log verbosity
  #logLevel: 2

  # zap log encoder
  # options: console, json
  #logFormat: console

  # Default image policy that is used by all pod containers unless being explicitly overwritten
  defaultImagePullPolicy: Always

#sfcn-asac-exporter sets the settings for asacExporter component. These can be set from command line with
#--set asacExporter.settingName. This module contains an exporter service to invoke ASA CLI commands on
# available enforcer pods and expose an api with metrics in prometheus format at port 9275. Following
# are the available settings for this component, uncomment the setting you want to override and set the new value to it
asacExporter:
  #asacExporterImage is the docker image for the exporter service that exports asa metrics
  #asacExporterImage: sfcn-asac-exporter:v0.0.0-145

  #defaultImagePullPolicy is default docker image policy to use for pulling the images that is used by all pod containers
  defaultImagePullPolicy: Always

  # specifies the amount of memory to request for the asac-exporter container
  # memoryRequest: "25Mi"

  # specifies the maximum memory that can be allocated for the asac-exporter container
  # memoryLimit: "50Mi"

  # the amount of vCPU to request for the asac-exporter container
  # cpuRequest: "100m"

  # the maximum amount of vCPU that can be allocated for the asac-exporter container
  # cpuLimit: "1000m"

  #metricsPort is the port at which asac metrics are exposed in prometheus format.
  #metricsPort: 9275

  # Interval (in seconds) to collect metrics from asac pods.
  # metricScrapeInterval: 60

  # Interval (in seconds) to update the list of asac pods in cluster.
  # podDiscoveryInterval: 120

#sfcn-kube-state-metrics sets the settings for asacExporter component. These can be set from command line with
#--set asacExporter.settingName. This module generates metrics about the state of the Kubernetes objects.
# It is focused on the health of the various objects inside, such as deployments, nodes and pods
# and expose an api with metrics in prometheus format at port 8080. Following
# are the available settings for this component, uncomment the setting you want to override and set the new value to it
kubeStateMetrics:
  #kubeStateMetricsImage is open source image used by kube-state-metrics
  #kubeStateMetricsImage: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.2.4

  #defaultImagePullPolicy is default docker image policy to use for pulling the images that is used by all pod containers
  defaultImagePullPolicy: Always

  # specifies the amount of memory to request for the kube-state-metrics container
  # memoryRequest: "200Mi"

  # specifies the maximum memory that can be allocated for the kube-state-metrics container
  # memoryLimit: "250Mi"

  # the amount of vCPU to request for the kube-state-metrics container
  # cpuRequest: "10m"

  # the maximum amount of vCPU that can be allocated for the kube-state-metrics container
  # cpuLimit: "100m"

  # port exposed for http metrics
  # metricsPort: 8080

  # port exposed for telemetry metrics
  # telemetryPort: 8081

#sfcn-packettracer sets the settings for pkttrace component. These can be set from command line with
#--set packettracer.settingName. This component is responsible for transforming the PKT-Trace logs from each node
# into opentelemetry compatible json and export to given collector endpoint. Following are the available settings for this component,
# uncomment the setting you want to override and set the new value to it
packettracer:
  #pktTraceImage is the Docker image for the job that transforms the packet trace logs
  #pktTraceImage: sfcn-packettracer:v0.0.0-145

  #defaultImagePullPolicy is default docker image policy to use for pulling the images that is used by all pod containers
  defaultImagePullPolicy: Always

tags:
  controlPlane: true
  dataPlane: true

cagAdmin:
  redis:
    port: 6379
    host: master.usc66a4mem3tmsv.h5wuke.use1.cache.amazonaws.com
